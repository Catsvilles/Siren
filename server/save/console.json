{"sc":"(\n~sx7 = MIDIOut.newByName(\"IAC\", \"Bus 1\");\n~dirt.soundLibrary.addMIDI(\\sx7, ~sx7);\n\n)\ns.meter\nOSC","tidal":"import Sound.OSC.FD\n\nimport Sound.Tidal.Utils\n\nimport qualified Data.Aeson as A\nhush\nkillSnd :: (a, b, c) -> (a, c)\nkillSnd (a,b,c) = (a,c)\nhush\n\ninstance A.ToJSON Value where\n  toJSON (VS s) = A.toJSON s\n  toJSON (VF f) = A.toJSON f\n  toJSON (VI i) = A.toJSON i\n\ninstance A.ToJSON Param where\n  toJSON param = A.toJSON (name param)\n\ninstance A.ToJSONKey Param\n\nhush\n-- A.toJSON $ map killSnd $ arc (n \"1 2\") (now, now + 1)\n\n-- A.encode $ A.toJSON $ arc (sound \"x\") (0,1)\n\nlet wrapDirts ds = do x <- openUDP \"127.0.0.1\" 57121\n                      let f (n,d) p = do now <- getNow\n                                         sendOSC x $ Message \"/vis\" [int32 (floor now),\n                                                                     Blob $\n                                                                     Data.ByteString.Lazy.fromStrict $\n                                                                     Data.ByteString.Char8.pack $\n                                                                     show $\n                                                                     A.encode $ A.toJSON $\n                                                                     map killSnd $\n                                                                     arc p (now+0, now+1)]\n                                         d p\n                          fs = map f (enumerate ds)\n                      return fs\n\n[x1,x2,x3,x4,x5] <- wrapDirts [d1,d2,d3,d4,d5]\n\nx1 $ sound \"bd\"\n\ncps 1\n\nx2 $ every 3 (fast 2 )$ slow 2 $ sound \"{atmo bass1, bass2 }\" #gain 1.2 #cut 1\n\nhush\nd1$slow 12 $ slicepat \"{0 <3 2> <1 2 1 0> [1 4]}\" 4 $ n \"{0 3 4 1}\" # sound \"abeat\" #comp 0.5 \n\nd1 $ sometimes (someCyclesBy 0.6 (#speed 2))$ slow 12 $ slicepat \"0 <3 2> <1 2 1> [1 4]\" 4 $ n \"{0 3 4*2 [5 2], 0 3*2 [2 8*2]}\" # sound \"juno\" #gain 1.2 #hall 0.3 #orbit 5 |+|n 12\n\n\nd2 $ silence\n\n\nx1 $ silence\nx2 $ silence\nlet slicepat :: Pattern Int -> Int -> Pattern a -> Pattern a\n    slicepat pi n p = Pattern f\n    -- TODO deal with span vs span'\n      where f a = concatMap (\\(span, span', i) -> arc (compressTo span (zoomTo i p)) span) $ arc pi a\n            zoomTo :: Int -> Pattern a -> Pattern a\n            zoomTo i p = zoom ((fromIntegral (i `mod` n)) / fromIntegral n,\n                               (fromIntegral ((i `mod` n)+1)) / fromIntegral n\n                              ) p\n\n\n\n\n\n\n\n\nx1$nToOrbit $ n \"{0 [ ~ 1] 0 ~ [1 1]}%3\"  #s \"808\" \n\nd2 $slow 2$ note (scaleP \"ionian\" \"{c3 g3}%3\") #s \"sx7\"  \n\n\n\n\n\nd2 $slow 2 $ chop 4 $ nToOrbit $ modValuesF lpf_p ( 5000 <) ((#coarse 1).(#hall 0.5)) $ modNote 3 (#speed \"<0.5 1>\")$ n \"{0 [~ 1] ~ <0 [0 0]> ~ 1}%5\" #s \"gen1\" #comp 0.5 #speed 1 #lpf \"<5000 9000 2400 8990>\"\n\n\n\n\n\n\n\nd3 $ slow 2 $ distrib [3,7,16] $ sound \"bd\" #orbit 0 #shape 0.5 #gain 1.2\nd4 $ slow 2 $ distrib [2,7,16] $ sound \"blp2:2\" #orbit 1 #shape 0.5 #gain 1.2 #sparkle 1.5\n\n\n\n"}
