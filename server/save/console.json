{"sc":"// Silence\na.free;\n\ns.freeAll;\ns.mute;\n\n(\n  Pdef(\\x,\n      Pbind(\n          \\type, \\dirt,\n          \\s, Pseq([\\bd, \\hh, \\bd, \\hh], inf),\n          \\dur, 0.25 * Pseq([1, 1/2, 1], inf),\n          \\cutoff, [1345, 1000, 400] + Prand([0, 0, 0, 0, 0, 0, -100, 200, [-100, 210]], inf),\n          \\resonance, 0.8\n      )\n  ).play\n  )\n)\n\n// ambient\n(\na = play{a=HPF.ar(ar(PinkNoise,5e-3),10)*Line.kr(0,1,9);ar(GVerb,({|i|ar(Ringz,a*LFNoise1.kr(0.05+0.1.rand),55*i+60,0.2)}!99).sum,70,99).tanh}\n)\n\n// Manipulate bus through SC \nNdef(\\scbus).ar(~dirt.numChannels); // make a place for a signal\na = Ndef(\\x, { RLPF.ar(Ndef.ar(\\scbus), MouseX.kr(300, 8000, 1), 0.04) }).play; \n\n// listen directly:\n~dirt.orbits[0].outBus = Ndef(\\scbus).bus;\nNdef(\\scbus).play;\n\n// stop listening\nNdef(\\scbus).stop;\na.free;\n~dirt.orbits[0].outBus = 0;\n\n// Task assigning\n(\nt = Routine{\n    6.do { arg i;\n       ~modFunc.set(\\freq, 500 * i);\n       0.5.wait;\n       i.yield;\n    }\n}\n)\nt.stop;\nt.start;\nt.free\n\n~dirt.loadSoundFiles(\"C:\\\\Users\\\\Mert\\\\Dropbox\\\\~siren\\\\gfix\\\\*\")\n\n~dirt.soundLibrary.addMIDI(\\nord1, ~nord, (midichan: 1));\n~dirt.soundLibrary.addMIDI(\\md1, ~m1, (midichan: 2));\n\n\n(\nMIDIIn.connectAll;\ns = Server.default;\n~midiInINST= MIDIIn.findPort(\"IAC\", \"Bus 1\").asMIDIInPortUID;\n~dx7 = DX7Clone.new(s);\n~dx7.noteFreeTimeout(-1);\n~cc1 = 1;\n~cc2 = 2;\n(\nMIDIdef.noteOn(\\DX7, {arg vel, note;\n\t~dx7.note(1,note,vel, 9800 4);\n},srcID:~midiInINST,chan:0).add;\n)\nMIDIdef.cc(\\DX7CC, {arg ...args;\n\t~cc1 = args[20];\n\t~cc2 = args[21];\n},(0..1),srcID:~midiInINST,chan:0).add;\n\nMIDIdef.noteOff(\\DX7off, {arg vel, note;\n\t~dx7.note(1,note,0, 9800, 4);\n},srcID:~midiInINST,chan:0).add;\n)","tidal":"one d1 $ n \"c3(4,9)\" # s \"pc1\" \nhush\n\n-- NOTES FROM JOANN\nduration\namp\nfreq?\nfibonacci numbers for the compostion\nphrases -- connected to the graphics\n---------------------\n\nd1 $ n (run 3) # s \"glo0 kitb\" \nd1 $ n (run 3) # s \"monosynth\" \nd1 $ (slow 4) $ n (run 4) # s \"monochord\" # speed \"0.5\"\nd1 $ n \"d3(3,8)\" # s \"monopad\" \nd1 $ n \"d3(3,8)\" # s \"pc1\" \nd1 $ n (run 3) # s \"pc2\" \nd1 $ n (run 3) # s \"pc0\" \nd1 $ n (run 3) # s \"rd1\" \nd1 $ every 4 ((slow 2).(#s \"pc0\")) $ n (run 3) # s \"rd2\" \nd1 $ n (run 3) # s \"rd0\" \nd1 $ n (run 3) # s \"split\" \nd1 $ n \"0\" # s \"stinger\"\nd1 $ n (run 3) # s \"zone\" \nd1 $ n \"0\" # s \"zone\" # end \"0.3\"\nd2 $ every 4 ((striate 16).(#speed 0.1)) $ n \"{0 2}%4\" # s \"monobass\" # room 0.2\nd3 $ every 6 (slow 4) $ n \"0 3? ~ 4?\" # s \"glo2\" # gain 1 # orbit 0\nd4 $ every 8 (#s \"gen4\") $ n \"{0 3 {~ 4}} % 2\" # s \"glow\" # gain 0.9 #orbit 1 # end 0.1\nd5 $ sometimes (rev) $ every 2  ((# s \"grain\").(# speed 2)) $ n \"{{0 3} {~ 4}} % 2\" # s \"gperc\" # gain 1 # orbit 1\nd6 $ sometimes (rev) $ every 2  ((# s \"gvoc\").(# speed 2)) $ n \"{{0 3} {~ 4}} % 2\" # s \"hit\" # gain 1 # orbit 1\nd7 $ every 6 (# s \"kitb monochord\") $ n \"0 3? {4 5}%2 \" # s \"hithat\" # gain 1 # orbit 0\n\n-- Silences\nhush\nd1 $ silence \nd2 $ silence\nd3 $ silence\nd4 $ silence\nd5 $ silence\nd7 $ silence\n\nd1 $ off 0.5 ((#s \"monobass\").(#orbit 0).(#lpf 6000).(#hpf 100).(#gain 0.8)) $ off 0.5 ((#s \"monopad?\").(#orbit 0).(#lpf 9000).(#hpf 1020).(#gain 0.8)) $ slow 2.75 $ n \"<4 2 5 3 2 4 3 5  4 6 <5 7 6 8 9 8 5 2 4> 3 4 1 2 4 1 > ~\" # s \"adl\"\n\n-- Future value silences\nx1 silence\nx2 silence\nx3 silence\nx4 silence\n\nx1 $ every 4 ( fast (scale 1 4 $ irand 3 ) ) $ n \"0 2 3\" # s \"bass2\" #sirenChan 0\nx2 $ n \"1 2 3\" # s \"pc0\" # gain \"1.3\" # sirenChan 1 # pan sine\nx3 $ sometimes (|+| room 0.3) $  every 3 (# s \"md0 gen2\") $ every 4 (fast 4) $ n \"[0 2] {3 ~ 4}%4 \" # s \"bass0 bass2\" # gain \"0.8 0.7 0.9\" # sirenChan 2\nx4 $ n \"0 2  3 ~ {2 ~ 4}%4\" # s \"bass4 bass0\" # gain 0.6 # sirenChan 3\n\nx1 $juxBy 0.2 (#s\"bass1\") $ every 2 (#n \"{~ 1}\" ) $n \"{0 1? }%2 \" #s \"bass2\" #sirenChan 1\nx2 $ sound \"gen0\" #sirenChan 0\nx3 $ every 2 (fast 2) $ sound \"[gen0 foil0]*2\" # gain \"0.7 0.8\" # sirenChan 2\nx4 $ sound \"gen0 ~ ~ foil1 ~\" \n\n-- Future value importer\nimport Sound.OSC.FD\n\nimport Sound.Tidal.Utils\n\nimport qualified Data.Aeson as A\n\nkillSnd :: (a, b, c) -> (a, c)\nkillSnd (a,b,c) = (a,c)\n\ninstance A.ToJSON Value where\n  toJSON (VS s) = A.toJSON s\n  toJSON (VF f) = A.toJSON f\n  toJSON (VI i) = A.toJSON i\n\ninstance A.ToJSON Param where\n  toJSON param = A.toJSON (name param)\n\ninstance A.ToJSONKey Param\n\nlet wrapDirts ds = do x <- openUDP \"127.0.0.1\" 57121\n                      let f (n,d) p = do now <- getNow\n                                         sendOSC x $ Message \"/vis\" [int32 (floor now),\n                                                                     Blob $\n                                                                     Data.ByteString.Lazy.fromStrict $\n                                                                     Data.ByteString.Char8.pack $\n                                                                     show $\n                                                                     A.encode $ A.toJSON $\n                                                                     map killSnd $\n                                                                     arc p (now+0, now+11)]\n                                         d p\n                          fs = map f (enumerate ds)\n                      return fs\n\n[x1,x2,x3,x4,x5] <- wrapDirts [d1,d2,d3,d4,d5]\n\n-- Single Execution\nlet startclock d p = do {now <- getNow; d $ (pure (nextSam now)) ~> p}\n\nlet oneshot d p = startclock d $ seqP [(0, 1, p)]"}
