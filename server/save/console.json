{"sc":"(\na = { SinOsc.ar(SinOsc.kr([30, 60], 0, 0.5), 0, 0.5) }.play;\n)\n\n// Silence\na.free;\n\ns.freeAll;\ns.mute;\n\n~dirt.loadSoundFiles(\"C:\\\\Users\\\\Mert\\\\Dropbox\\\\~siren\\\\gfix\\\\*\")\n\n~dirt.soundLibrary.addMIDI(\\nord1, ~nord, (midichan: 1));\n~dirt.soundLibrary.addMIDI(\\md1, ~m1, (midichan: 2));\n\n\n(\nMIDIIn.connectAll;\ns = Server.default;\n~midiInINST= MIDIIn.findPort(\"IAC\", \"Bus 1\").asMIDIInPortUID;\n~dx7 = DX7Clone.new(s);\n~dx7.noteFreeTimeout(-1);\n~cc1 = 1;\n~cc2 = 2;\n(\nMIDIdef.noteOn(\\DX7, {arg vel, note;\n\t~dx7.note(1,note,vel, 9800 4);\n},srcID:~midiInINST,chan:0).add;\n)\nMIDIdef.cc(\\DX7CC, {arg ...args;\n\t~cc1 = args[20];\n\t~cc2 = args[21];\n},(0..1),srcID:~midiInINST,chan:0).add;\n\nMIDIdef.noteOff(\\DX7off, {arg vel, note;\n\t~dx7.note(1,note,0, 9800, 4);\n},srcID:~midiInINST,chan:0).add;\n)","tidal":"d1 $ n \"0\" # s \"bd\" \nd2 $ every 4 ((striate 16).(#speed 0.1)) $ n \"{0 2}%4\" # s \"bass3\" # room 0.2\nd3 $ every 6 (slow 4) $ n \"0 3? ~ 4?\" # s \"bd\" # gain 1 # orbit 0\nd4 $ every 8 (#s \"gen4\") $ n \"{0 3 {~ 4}} % 2\" # s \"bass2\" # gain 0.9 #orbit 1 # end 0.1\nd5 $ sometimes (rev) $ every 2  ((# s \"md0\").(# speed 2)) $ n \"{{0 3} {~ 4}} % 2\" # s \"808\" # gain 1 # orbit 1\n\n-- Silences\nhush\nd1 $ silence \nd2 $ silence\nd3 $ silence\nd4 $ silence\nd5 $ silence\n\nd1 $ off 0.5 ((#s \"monobass\").(#orbit 0).(#lpf 6000).(#hpf 100).(#gain 0.8)) $ off 0.5 ((#s \"monopad?\").(#orbit 0).(#lpf 9000).(#hpf 1020).(#gain 0.8)) $ slow 2.75 $ n \"<4 2 5 3 2 4 3 5  4 6 <5 7 6 8 9 8 5 2 4> 3 4 1 2 4 1 > ~\" # s \"adl\"\n\n-- Future value silences\nx1 silence\nx2 silence\nx3 silence\nx4 silence\n\nx1 $ every 4 ( fast (scale 1 4 $ irand 3 ) ) $ n \"0 2 3\" # s \"bass2\" #sirenChan 0\nx2 $ sound \"md0 gen0*2\" # gain \"0.7 0.8\" # sirenChan 1\nx3 $ sometimes (|+| room 0.3) $  every 3 (# s \"md0 gen2\") $ every 4 (fast 4) $ n \"[0 2] {3 ~ 4}%4 \" # s \"bass0 bass2\" # gain \"0.8 0.7 0.9\" # sirenChan 2\nx4 $ n \"0 2  3 ~ {2 ~ 4}%4\" # s \"bass4 bass0\" # gain 0.6 # sirenChan 3\n\nx1 $juxBy 0.2 (#s\"bass1\") $ every 2 (#n \"{~ 1}\" ) $n \"{0 1? }%2 \" #s \"bass2\" #sirenChan 1\nx2 $ sound \"gen0\" #sirenChan 0\nx3 $ every 2 (fast 2) $ sound \"[gen0 foil0]*2\" # gain \"0.7 0.8\" # sirenChan 2\nx4 $ sound \"gen0 ~ ~ foil1 ~\" \n\n-- Future value importer\nimport Sound.OSC.FD\n\nimport Sound.Tidal.Utils\n\nimport qualified Data.Aeson as A\n\nkillSnd :: (a, b, c) -> (a, c)\nkillSnd (a,b,c) = (a,c)\n\ninstance A.ToJSON Value where\n  toJSON (VS s) = A.toJSON s\n  toJSON (VF f) = A.toJSON f\n  toJSON (VI i) = A.toJSON i\n\ninstance A.ToJSON Param where\n  toJSON param = A.toJSON (name param)\n\ninstance A.ToJSONKey Param\n\nlet wrapDirts ds = do x <- openUDP \"127.0.0.1\" 57121\n                      let f (n,d) p = do now <- getNow\n                                         sendOSC x $ Message \"/vis\" [int32 (floor now),\n                                                                     Blob $\n                                                                     Data.ByteString.Lazy.fromStrict $\n                                                                     Data.ByteString.Char8.pack $\n                                                                     show $\n                                                                     A.encode $ A.toJSON $\n                                                                     map killSnd $\n                                                                     arc p (now+0, now+11)]\n                                         d p\n                          fs = map f (enumerate ds)\n                      return fs\n\n[x1,x2,x3,x4,x5] <- wrapDirts [d1,d2,d3,d4,d5]"}
