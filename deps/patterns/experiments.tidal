-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
cps 1.4
--Main
d1 $every 6 ((#n "{0 2 ~ 1 1*2 }%5" ).(rev)) $every 2 (#n "{~ 1 [2? 1] [2 3]}%5" ) $n "{0 1 ~ 0 1 }%5 " #s "drums" #speed "1" #shape "0.2 0.35" #cut "2" #gain "1"
--Sub
d2 $slow 4 $n "{ 2  [2? 2]}%5 " #s "drums" #speed "1" #shape "0.2 0.35" #cut "1" #gain "1"

--Break


  d3 $ slow 2 $
  slowspread (\wa ->
               slowspread (\wb ->
                            sometimes (within(wa, wb)
                                       (slowspread (\f ->
                                                     (slowspread (\v ->
                                                                   (f v))
                                                      [0.25, 0.25, 0.75]))
                                        [(stut 4 0.75), (stut 2 0.75), (<~),
                                         (stut 4 0.75), (stut 2 0.75), (~>)])))
               [0.5, 0.75, 1])
  [0.25, 0.25, 0, 0] $
  stack[
    slowcat[
       n "{1 [~ 1] ~  1}%5" #coarse "2" #end "0.3",
       n "{1 [~ 1] 1  1}%5",
       n "{2 [2 ~ ] 2  ~}%5" #speed "2"
       ] # s "drums" #cut "1 2"
    ]

d5 $slow 4 $every 6 ((#n "{0 2 ~ 2 1*2 }%5" ).(rev)) $every 2 (#n "{~ 2 [2? 1] [2 ~]}%5" $n "{ 2  [2? 2]}%5 " #s "drums" #speed "2" #shape "0.2 0.35" #cut "1" #gain "1"
d1 silence
d3 silence
d2 silence
d5 silence
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--Main
d1 $every 6 ((#n "{0 2 ~ 1 1*2 }%5" ).(rev)) $every 2 (#n "{~ 1 [2? 1] 0 [2 0] }%5" ) $n "{0 1 ~ 0 1 }%5 " #s "drums" #speed "1" #shape "0.2 0.35" #cut "2" #gain "1"
--Sub
d1 silence
d2 $slow 4 $n "{ 2 ~ [2? 2]}%5 " #s "drums" #speed "1" #shape "0.2 0.35" #cut "3" #gain "1" #speed "2 0.5" #cutoff "3000 1500" #resonance "0.002 0.12"

d2 $every 4 (slow 8 ) $slow 4 $n "{ 2 ~ [2? 2]}%5 " #s "drums" #speed "1" #cut "3" #gain "1" #speed "0.78 0.65" #cutoff "4000 1500" #resonance "0.002 0.15" #attack "0.5"

d2 $every 4 (slow 8 ) $slow 6 $n "{ 2 ~ [2? 2]}%5 " #s "drums" #speed "1" #cut "3" #gain "1" #speed "0.78 0.65" #cutoff "4000 1500" #resonance "0.002 0.15" #attack "0.5"

d4 $jux(iter 2) $slow 16 $striate 256 $n"4" #s "drums" #speed "2"
d4 silence
--Break
displayOutputDevices >>= putStrLn
devices <- midiDevices
  d3 $ slow 2 $
  slowspread (\wa ->
               slowspread (\wb ->
                            sometimes (within(wa, wb)
                                       (slowspread (\f ->
                                                     (slowspread (\v ->
                                                                   (f v))
                                                      [0.25, 0.25, 0.75]))
                                        [(stut 4 0.75), (stut 2 0.75), (<~),
                                         (stut 4 0.75), (stut 2 0.75), (~>)])))
               [0.5, 0.75, 1])
  [0.25, 0.25, 0, 0] $
  stack[
    slowcat[
       slow 4 $n "{2 [2 ~] ~  1}%5" #end "1" #speed "0.78 0.65"#cutoff "3000 1500" #resonance "0.002 0.12",
       slow 2 $n "{2 [2 ~] ~  1}%5" #end "1" #speed "0.78 0.65"#cutoff "3000 1500" #resonance "0.002 0.12",
       n "{1 [~ 1] ~  1}%5",
       n "{2 [~ 2] 2  ~}%5" #speed "2"
       ] # s "drums" #cut "-1 2"
    ]

d4 $slow 4 $n "{ 2  [2? 2]}%5 " #s "drums" #speed "1" #shape "0.2 0.35" #cut "1" #gain "1"

d1 silence
d2 silence
d3 silence
d4 silence

------------------------------------------------------------------------------------------
d1 silence
d3 silence
d2 silence

d3 $ slow 8 $ n (wedge (4%13) "0 [~!! 1] ~ [~ 0 0]" "[[0 ~! 1] ~ [~ 0 0]]!!") # s "sacid"
d2 silence

d3  $every 6 ((#n "{0 2 ~ 1 ~ }%5" ).(rev)) $every 5 (#n "{~ 1 [2 1] [2 3]}%5" ) $n "{0 1 ~ 0 1 }%5 " #s "pad"
#speed "1"  #end "0.5 2" #pan (slow 4 $scale 0.8 1.2 sine1) #orbit "3" #room "0.25" #speed "1" #delay "0.4 0.2" #cut "2 1" #cutoff "5000"

d2 silence


d1 silence
d
d2 silence
d1 $ slow 3 $ wedge (4%13) (n "0 [~!! 1] ~ [~ 0 0]" # s "drums") $ n "[[0 ~! 1] ~ [~ 0 0]]!!" # s "drums"
hush


let dr3 i = n "[[0 ~! 1] ~ [~ 0 0]]!!" # s i
    dr4 i = n "0 [~!! 1] ~ [~ 0 0]" # s i
  in d1 $
     slow 13 $ wedge (4%13) (dr4 "drum") $
     -- slow 9 $
     dr3 "drum"




     slow 200 $ (sound $ step "feel" (take 1600 $ lindenmayer 30 "-:0,0:-1,1:-4-,4:-" "-0-1"))
     data Sieve a = Sieve {at :: Int -> a}
     instance Functor Sieve where
         fmap f s = Sieve $ \i -> f (at s i)
     instance Applicative Sieve where
         pure b = Sieve $ \i -> b
         (<*>) a b = Sieve $ \i -> (at a i) (at b i)
     let basicSieve m i = Sieve $ \j -> (j `mod` m) == i
         infixl 9 @@
         (@@) = basicSieve
         infixl 7 #||#
         (#||#) = liftA2 (||)
         infixl 8 #&&#
         (#&&#) = liftA2 (&&)
         snot = fmap not
         infixl 7 #^^#
         (#^^#) x y = (x #&&# snot y) #||# (y #&&# snot x)
         toList n s = map (at s) [0..n-1]
         toString n s = map b2c $ toList n s where
           b2c b | b == True = 'x' | otherwise = '-'
         toInts n s = map snd $ filter fst (zip (toList n s) [0..n-1])
     toInts 12 $ 2@@1 #^^# 3@@0
     toString 16 $ 3@@1 #||# 2@@0
     -- more complicated sieve examples
     d1 $ slow 4 $ sound (stack [
      step "bd" $ toString 32 $ 5@@2 #||# 4@@0,
      step "sn:2" $ toString 32 $ 4@@2 #^^# 3@@2])
      # shape "0.5"
     d2 $ do {
       x <- "<1 2 3>";
       y <- "<1 2>";
       n (toScale (toInts 12 $ snot $ 4@@x #^^# 3@@0) (fmap (*y) $ every 2 rev $ run (8 `div` y)))}
      # s "superzow" # bandf (density 1.2 $ scalex 500 2000 sine1) # bandq "5"


      d1 $
      spin 2 $
      juxBy 0.9 (slow 2) $
      superimpose (slowspread slow [3, 4] . (#vowel "{a e i o u}%3") . (|*| speed "0.5")) $
      sometimes (slowspread chop [2, 8, 4] . slow 2) $
      (
      slow 32 $ slowspread (\x -> slowspread (striate' x) [(1/2), (1/4), (1/2), (1/8)]) [32, 64] $
      interlace
      (
        stack [
        foldEvery [3, 4] (0.25 <~) $ degradeBy 0.5 $ s samplset #n "0" #cut "1",
        foldEvery [3, 4] (0.5 <~) $ degradeBy 0.95 $ s samplset #n "1" #cut "2",
        foldEvery [4, 5] (0.25 <~) $ degradeBy 0.5 $ s samplset #n "2" #cut "3",
        foldEvery [4, 5] (0.5 <~) $ degradeBy 0.5 $ s samplset #n "3" #cut "4"
        ]
      )
      (
        slowcat [
        foldEvery [3, 4] (0.25 <~) $ degradeBy 0.5 $ s samplset #n "0" #cut "5",
        foldEvery [3, 4] (0.5 <~) $ degradeBy 0.95 $ s samplset #n "1" #cut "6",
        foldEvery [4, 5] (0.25 <~) $ degradeBy 0.5 $ s samplset #n "2" #cut "7",
        foldEvery [4, 5] (0.5 <~) $ degradeBy 0.5 $ s samplset #n "3" #cut "8"
        ]
      )
      )#speed "{1 1 1 1 2/4, ~ ~ 0.25/3 ~}%3"
      #cutoff (rand' 1.2 1000 3000)
      #delaytime (slow 16 "{0.25 0.5 1 0.5}%3")
      #delay (rand' 1.4 0.1 0.3)
      #delayfeedback (rand' 1.5 0.2 0.4)
      #shape (sine' 16 0.1 0.9)
      #crush (slow 7 "16 12 11/2 10 8/3 7/7")


      foldEvery [3,4 ] (13.25<~)
      slowspread ($) [id,rev]
      #unit "c"



d1 $slowspread ($) [rev, (stut 4 0.125 0.25 . zoom (0,0.25)), id, id, iter 4 ]$ foldEvery [3,4] (0.25 <~) $ whenmod 6 5 (zoom (0.5,1)) $ stack [

]
hush
d2 $ slowspread density [1.1, 1.2 .. 2.7] $ sound "blp_grit:4"


t2 (jumpMod 2)  $struct "[x x] [x x x]" $n (run 5) # s"blp_grit"
t2 xfade  $struct "[x x] [x x x]" $n (run 5) # s"blp_grit"
t2 (anticipateIn 2)  $struct "[x x] [x x x]" $n (run 5) # s"blp_78e"
t2 (wash (chop 8) 4)   $struct "[x x] [x x x]" $n (run 5) # s"blp_78e"



d1 $ struct "[x x] [x x x]" $n (run 5) # sound "blp_grit"
d1 $ every 4 (|*| speed "-1") $ jux rev $ slowspread (chop) [4,3] $ s "{ravebass:12 mt:1, bd sn [ravebass:10 sn:2]}"

d2 silence
hush
let chords = [("am7c", "[a3 c4, e4 ~ e3, g3 g4]"),
              ("gm7", "[g4, bf3 bf2, d3 d4, f4]")
             ]
in
d1 $ up (every 2 ((+ 12) <$>) $ fromIntegral <$> inhabit chords "am7c [gm7 ~] gm7 [~ am7c]") # s "arpy"

t1  (anticipateIn 4)  $every 4 (|*| speed "-1") $ jux rev $ slowspread (chop) [4,3] $ s "{ravebass:12 mt:1, bd sn [ravebass:10 sn:2]}"
----------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------



d1 $ slowspread density [1.1, 1.2 .. 2.7] $ sound "blp_grit"

d1 $ rev $ slow 4 $ chop 64 $ sound "bev"


drawLines ("out.pdf") (dirtToColour (sound "bd sn"))


d1 $ sound "newnotes" # n "4"


import Sound.Tidal.Draw


let permeate steps ns p = (n (permstep steps ns (slow 16 sine1)) # sound p)
  in
 d1 $ slow 4 $ jux' [permeate 16 [2..7],
                     permeate 12 [7,5,2],
                     permeate 8 [0,3,7]
                    ] "latibro"
  # speed "4"
  # room "0.9"
  # size "0.9"
  # cutoff (slow 16 $ scale 1000 2000 saw1)
  # resonance (slow 16 $ scale 0.3 0.4 saw1)

d2 $ slow 2 $ n (permstep 16 [3 .. 9] (slow 16 sine1)) # sound "arpy"
b  # speed "0.5"
  # pan "0"

:t permstep

d1 $ sound "bd [<2> sn:4 bd, <2/3> newnotes:3 sn:2]@3"

cps 0.5

d1 $ jux rev $ iter 4 $ sound "bd [sn sn:1] . sn:2 arpy arpy:3 . bd ~ bd . arpy:4 [arpy:3 arpy:5]"
  # cutoff (scale 1000 3000 sine1)
  # resonance "0.2"

d2 $ within (0,0.5) (density 0.5) $ jux rev $ (loopAt 1 $ chop 16 $ sound "breaks125")
  # orbit "1"

cps 0.5

d3 $ jux rev $ slow 4 $ n (offadd (1/16) 12 $ offadd (1/32) (7) $ (subtract 12) <$> "g8(3,8) e7(3,8) . f7(3,8) e7(3,8) a6(3,8) g7*2 . d8(3,8,2) g8(3,8) . a8(5,8) e7(3,8) a7(3,8) g6*2") # sound "rash"
  # cutoff (scale 1000 5000 sine1)
  # resonance "0.2"
  # shape "0.4"
  # orbit "1"

d4 $ substruct "x x/2" $ sound "future feel . cp sd8:4 sd8:4"
  # delay "0.8"
  # delaytime (slow 2 $ scale 0.05 0.03 sine1)
  # delayfeedback "0.9"
  # orbit "2"

d3 $ brak $ sound "drum feel feel:3 ~"
  # orbit "1"


d1 $ jux rev $ stut 3 0.9 0.25 $ slow 2 $ n "d6 e7 . d7 e8 g8 . a8 d7 . g8" # sound "pulse"
  # speed "0.5"


d1 $ slow 2 $ jux rev $ (loopAt 2 $ chop 16 $ sound "atlast:2")
  |*| speed "[0.5]"

d2 $ jux (iter 4) $ sound "funky*4" # n (irand 8)

hush
cps 1

c1 $ sound "bd"


d1 $ n "0 1" # sound "numbers"
  # pan "0 1"


hush

(cps, nudger, getNow) <- cpsUtils'

nudger (0.1)

c1 $ jux rev $ chop 8 $ sound "bd [sn sd8:3*2] bd*3 bd"

hush


d1 $ jux rev $ chop 16 $ sound "bd sn:2"

d10 $ n  "1 0 0 0" # sound "casio"
  # orbit "2"

let pp = [sound "gabba sn:2", sound "cp cp"]
  in
    d1 $ do {n <- "{0 0 1 [0,1]}%1"; pp!!n}



d1 $ slow 4 $ sound "cp sn sn sn"
  # nudge "0.2"

hush

d1 $ sound "arpy:0(3,8)" # speed "1"

d1 $ sound "arpy:0(3,8)" # orbit "2"
  # pan "0 1"
hush
  t1 (interpolateIn 4) $ sound "arpy:2(3,8)" # speed "4" # shape "0"

t1 (interpolateIn 4) $ sound "arpy:0(3,8)" # speed "1" # shape "0.2"
hush



d1 $ ur 16 (every 2 (density 2) $ "[0:out, 1 [2 3:out], 4:in]")
  [jux rev $ iter 4 $ loopAt 2 $ chop 16 $ sound "breaks125",
   sound "arpy ~ arpy:3 arpy:2" # crush "3",
   sound "arpy ~ arpy:3*2 arpy:2" # crush "4",
   runWith 4 (density 2) $ sound "arpy ~ arpy:3*2 arpy:2" # crush "3",
   stut' 4 0.125 (|*| speed "2") $ sound "bd sn:3*2" # speed "1"
  ]


let pat = "0 0 1 0 1 1 0 1"
    inverse = (not <$>)
    mask' p p' = mask (filterValues id p) p'
    sew p pa pb = overlay (mask' p pa) (mask' (inverse p) pb)
in
d1 $ sew (iter 4 pat) (sound "bd*10") (sound "sn:3*10")

d1 $ ur 1 "{0 0 1 1 0 1 1 1 0 1}%8" [sound "bd", sound "sn:3"]

d1 $ tx "{id chipmunk slurp}%4" $ sound "bd ~ mt*2 ht:2"

d1 $ slow 2 $ tx' "{id chipmunk slurp}%4" $ sound "bd ~ mt*2 ht:2"
hush
d1 $ s "supersquare*8" # release "0.3"
     # bandf (density 3 $ sine1 * ((discretise 1 $ rand * 3600)) + 400)
     # bandq "5.5"
$ do {
  x <- "<1 2 3>";
  y <- "<1 2>";
  n (toScale (toInts 12 $ snot $ 4@@x #^^# 3@@0) (fmap (*y) $ every 2 rev $ run (8 `div` y)))}
 # s "superzow" # bandf (density 1.2 $ scalex 500 2000 sine1) # bandq "5"

 --phasing
 d1 $ slow 2 $ (now-1) ~> do {
     x <- slow (12 * 12) $ run 12;
     jux ((x/12) <~) $ sound "cp ! ! ~ cp ! ~ cp ~ cp ! ~"}


     d1 $ slow 2 $ (now-1) ~> do {
    x <- slow (100) $ run 100;
    jux ((x/100) <~) $ sound "cp*4"}
